#include <iostream>
#include <set>

/**
 * @brief (Мамины поручения)
 * Мама отправила Васю купить продукты в супермаркете и забрать посылку из пункта выдачи
 * Дорога от дома до супермаркета имеет длину a метров,
 *        от дома до пункта выдачи — b метров,
 *        а дорога от супермаркета до пункта выдачи — c метров.
 * Вася может ходить по этим дорогам в любом направлении.
 * Скорость Васи зависит от того, несет ли он что-нибудь или идёт без груза.
 * Если он не несет ни продукты, ни посылку, то его скорость равна v0 метров в минуту.
 * Если он несет что-то одно, то его скорость равна v1​ метров в минуту (v1≤v0​).
 * Если он несет и продукты, и посылку, его скорость равна v2​ метров в минуту (v2≤v1​).
 * 
 * Вася может мгновенно купить продукты, получить посылку или занести имеющийся у него груз домой.
 * Определите минимальное время, за которое Вася может сходить за продуктами и посылкой и вернуться домой.
 * Формат ввода:
 * В единственной строке ввода записаны шесть целых чисел a, b, c, v0​, v1​, v2​ — длина дороги от дома до супермаркета,
 * длина дороги от дома до пункта выдачи, длина дороги от супермаркета до пункта выдачи,
 * скорость Васи без груза, скорость Васи с продуктами либо посылкой,
 * скорость Васи с продуктами и посылкой (1≤a,b,c≤100; 1≤v2≤v1≤v0≤100).
 * Формат вывода:
 * В единственной строке выведите одно вещественное число — минимальное количество минут,
 * которое потребуется Васе, чтобы сходить за продуктами и посылкой и вернуться домой.
 * Абсолютная или относительная погрешность ответа не должна превышает 1*10^−4.
 * 
 * Не проходит 65 тест.
 */

using namespace std;

int main() {
    double a = 0, b = 0, c = 0,
           v0 = 0, v1 = 0, v2 = 0;
    multiset<double> paths;

    cin >> a >> b >> c >> v0 >> v1 >> v2;

    double t_hs = a / v0;
    double t_hp = b / v0;

    double t_sp = c / v1;

    double t_sh = a / v1;
    double t_ph = b / v1;

    double t_p_sh = a / v2;
    double t_s_ph = b / v2;
   
    // сначала в одно место, потом домой, потом в другое, потом домой
    paths.insert(t_hs + t_sh + t_hp + t_ph);
    paths.insert(t_hp + t_ph + t_hs + t_sh);

    // полный цикл
    paths.insert(t_hs + t_sp + t_s_ph);
    paths.insert(t_hp + t_sp + t_p_sh);

    // сначала дошли до одного места, зашли в него, потом вернулись в другое, потом домой
    paths.insert(t_hp + t_sp + c/v2 + b/v2);
    paths.insert(t_hs + t_sp + c/v2 + a/v2);

    // сначала проходим мимо одно место, заходим в другое, затем возвращаемся туда, что прошли и идем домой
    paths.insert(t_hs + c/v0 + t_sp + a/v2);
    paths.insert(t_hp + c/v0 + t_sp + b/v2);

    // сначала обходим одно место, заходим в другое, идем домой, от дома идем в то, которое обошли
    // заходим в него и идем домой
    paths.insert(t_hs + c/v0 + b/v1 + t_hs + a/v1);
    paths.insert(t_hp + c/v0 + a/v1 + t_hp + b/v1);

    // заходим в одно место, идем домой, обходя другое место. Из дома возвращаемся в
    // обойдённое место со свободными руками, забираем и идем домой 
    paths.insert(t_hs + t_sp + t_sh + t_hp + t_ph);
    paths.insert(t_hp + t_sp + t_ph + t_hs + t_sh);

    paths.insert(t_hs + t_sp + c/v2 + a/v2);
    paths.insert(t_hp + t_sp + c/v2 + b/v2);

    printf("%0.15lf\n", *paths.begin());

    return 0;
}